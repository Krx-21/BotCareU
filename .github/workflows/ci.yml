name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # CODE QUALITY & LINTING
  # ==========================================
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/web/package-lock.json

      - name: 📦 Install root dependencies
        run: npm ci

      - name: 📦 Install backend dependencies
        run: cd backend && npm ci

      - name: 📦 Install frontend dependencies
        run: cd frontend/web && npm ci

      - name: 🔍 Lint backend code
        run: cd backend && npm run lint

      - name: 🔍 Lint frontend code
        run: cd frontend/web && npm run lint

      - name: 🎨 Check code formatting
        run: |
          cd backend && npm run format -- --check
          cd frontend/web && npm run format -- --check

      - name: 🔧 TypeScript type checking
        run: cd frontend/web && npm run type-check

  # ==========================================
  # BACKEND TESTING
  # ==========================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: botcareu_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: test_user
          DOCKER_INFLUXDB_INIT_PASSWORD: test_password
          DOCKER_INFLUXDB_INIT_ORG: botcareu
          DOCKER_INFLUXDB_INIT_BUCKET: test_data
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token
        ports:
          - 8086:8086

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install backend dependencies
        run: cd backend && npm ci

      - name: 🗄️ Run database migrations
        run: cd backend && npm run migrate
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/botcareu_test
          REDIS_URL: redis://localhost:6379
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test-token
          INFLUXDB_ORG: botcareu
          INFLUXDB_BUCKET: test_data

      - name: 🧪 Run unit tests
        run: cd backend && npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/botcareu_test
          REDIS_URL: redis://localhost:6379
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test-token
          JWT_SECRET: test-jwt-secret
          ENCRYPTION_KEY: test-encryption-key

      - name: 🔗 Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/botcareu_test
          REDIS_URL: redis://localhost:6379
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test-token
          JWT_SECRET: test-jwt-secret
          ENCRYPTION_KEY: test-encryption-key

      - name: 📊 Generate test coverage
        run: cd backend && npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/botcareu_test
          REDIS_URL: redis://localhost:6379
          INFLUXDB_URL: http://localhost:8086
          INFLUXDB_TOKEN: test-token
          JWT_SECRET: test-jwt-secret
          ENCRYPTION_KEY: test-encryption-key

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # ==========================================
  # FRONTEND TESTING
  # ==========================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/web/package-lock.json

      - name: 📦 Install frontend dependencies
        run: cd frontend/web && npm ci

      - name: 🧪 Run unit tests
        run: cd frontend/web && npm run test

      - name: 📊 Generate test coverage
        run: cd frontend/web && npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # ==========================================
  # BUILD VERIFICATION
  # ==========================================
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, backend-tests, frontend-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/web/package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend/web && npm ci

      - name: 🏗️ Build backend
        run: cd backend && npm run build

      - name: 🏗️ Build frontend
        run: cd frontend/web && npm run build

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: false
          tags: botcareu-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/web
          file: ./frontend/web/Dockerfile.prod
          push: false
          tags: botcareu-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # SECURITY SCANNING
  # ==========================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/web/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend/web && npm ci

      - name: 🔍 Run npm audit (Backend)
        run: cd backend && npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🔍 Run npm audit (Frontend)
        run: cd frontend/web && npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==========================================
  # MEDICAL COMPLIANCE CHECK
  # ==========================================
  compliance-check:
    name: 🏥 Medical Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for sensitive data patterns
        run: |
          echo "🔍 Scanning for potential PHI/PII patterns..."
          # Check for common patterns that might indicate PHI/PII
          if grep -r -i "ssn\|social.security\|patient.id\|medical.record" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" .; then
            echo "⚠️ Potential PHI/PII patterns found - review required"
            exit 1
          fi
          echo "✅ No obvious PHI/PII patterns detected"

      - name: 📋 Validate medical-grade requirements
        run: |
          echo "🏥 Checking medical-grade compliance requirements..."
          # Check for temperature precision requirements
          if ! grep -r "0\.1" backend/src/ frontend/web/src/; then
            echo "⚠️ Medical-grade temperature precision (±0.1°C) not found in code"
          fi
          # Check for audit logging
          if ! grep -r "audit\|log" backend/src/; then
            echo "⚠️ Audit logging implementation not found"
          fi
          echo "✅ Basic compliance checks completed"

      - name: 📊 Generate compliance report
        run: |
          echo "# Medical Compliance Report" > compliance-report.md
          echo "Generated: $(date)" >> compliance-report.md
          echo "## Temperature Precision" >> compliance-report.md
          echo "- Medical-grade precision: ±0.1°C requirement" >> compliance-report.md
          echo "## Data Security" >> compliance-report.md
          echo "- Encryption: Required for data at rest and in transit" >> compliance-report.md
          echo "## Audit Trail" >> compliance-report.md
          echo "- All medical data access must be logged" >> compliance-report.md

      - name: 📤 Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md
          retention-days: 30
