name: 📊 Performance Testing

on:
  schedule:
    - cron: '0 4 * * *'  # Daily at 4 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in minutes'
        required: false
        default: '10'
        type: string
      max_users:
        description: 'Maximum concurrent users'
        required: false
        default: '100'
        type: string
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # PERFORMANCE BASELINE
  # ==========================================
  performance-baseline:
    name: 📊 Performance Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/web/package-lock.json

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 📊 Create performance test suite
        run: |
          mkdir -p performance-tests
          
          # API Health Check Test
          cat > performance-tests/api-health.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '2m', target: 20 },
              { duration: '5m', target: 50 },
              { duration: '2m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.01'],
            },
          };
          
          const BASE_URL = __ENV.BASE_URL || 'https://staging-api.botcareu.com';
          
          export default function() {
            let response = http.get(`${BASE_URL}/api/v1/health`);
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
              'has correct content-type': (r) => r.headers['Content-Type'].includes('application/json'),
            });
            sleep(1);
          }
          EOF
          
          # Temperature Data Ingestion Test
          cat > performance-tests/temperature-ingestion.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '1m', target: 10 },
              { duration: '3m', target: 30 },
              { duration: '1m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<1000'],
              http_req_failed: ['rate<0.05'],
            },
          };
          
          const BASE_URL = __ENV.BASE_URL || 'https://staging-api.botcareu.com';
          
          export default function() {
            const payload = JSON.stringify({
              deviceId: `test-device-${Math.floor(Math.random() * 1000)}`,
              temperature: 36.5 + (Math.random() * 2), // 36.5-38.5°C
              timestamp: new Date().toISOString(),
              precision: 0.1
            });
            
            const params = {
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${__ENV.TEST_TOKEN || 'test-token'}`,
              },
            };
            
            let response = http.post(`${BASE_URL}/api/v1/temperature/reading`, payload, params);
            check(response, {
              'status is 201': (r) => r.status === 201,
              'response time < 1000ms': (r) => r.timings.duration < 1000,
              'medical precision maintained': (r) => {
                const data = JSON.parse(r.body);
                return data.precision === 0.1;
              },
            });
            sleep(2);
          }
          EOF
          
          # Dashboard Load Test
          cat > performance-tests/dashboard-load.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '2m', target: 50 },
              { duration: '5m', target: 100 },
              { duration: '2m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<2000'],
              http_req_failed: ['rate<0.02'],
            },
          };
          
          const BASE_URL = __ENV.FRONTEND_URL || 'https://staging.botcareu.com';
          
          export default function() {
            let response = http.get(BASE_URL);
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 2000ms': (r) => r.timings.duration < 2000,
              'contains dashboard': (r) => r.body.includes('BotCareU') || r.body.includes('dashboard'),
            });
            sleep(3);
          }
          EOF

      - name: 🧪 Run API health performance test
        run: |
          echo "🧪 Running API health performance test..."
          BASE_URL="${{ inputs.environment == 'production' && 'https://api.botcareu.com' || 'https://staging-api.botcareu.com' }}"
          k6 run --env BASE_URL="$BASE_URL" performance-tests/api-health.js

      - name: 🌡️ Run temperature ingestion performance test
        run: |
          echo "🌡️ Running temperature data ingestion performance test..."
          BASE_URL="${{ inputs.environment == 'production' && 'https://api.botcareu.com' || 'https://staging-api.botcareu.com' }}"
          k6 run --env BASE_URL="$BASE_URL" --env TEST_TOKEN="${{ secrets.PERFORMANCE_TEST_TOKEN }}" performance-tests/temperature-ingestion.js

      - name: 📱 Run dashboard load performance test
        run: |
          echo "📱 Running dashboard load performance test..."
          FRONTEND_URL="${{ inputs.environment == 'production' && 'https://botcareu.com' || 'https://staging.botcareu.com' }}"
          k6 run --env FRONTEND_URL="$FRONTEND_URL" performance-tests/dashboard-load.js

  # ==========================================
  # MEDICAL PRECISION PERFORMANCE
  # ==========================================
  medical-precision-test:
    name: 🏥 Medical Precision Performance
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🌡️ Create medical precision test
        run: |
          cat > medical-precision-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '1m', target: 5 },
              { duration: '3m', target: 15 },
              { duration: '1m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<800'],
              http_req_failed: ['rate<0.01'],
              'medical_precision_check': ['rate>0.99'],
            },
          };
          
          const BASE_URL = __ENV.BASE_URL || 'https://staging-api.botcareu.com';
          
          export default function() {
            // Test medical-grade temperature precision (±0.1°C)
            const testTemperatures = [
              36.5, 36.6, 36.7, 36.8, 36.9,
              37.0, 37.1, 37.2, 37.3, 37.4, 37.5,
              38.0, 38.5, 39.0, 39.5, 40.0
            ];
            
            const temperature = testTemperatures[Math.floor(Math.random() * testTemperatures.length)];
            
            const payload = JSON.stringify({
              deviceId: `precision-test-${Math.floor(Math.random() * 100)}`,
              temperature: temperature,
              timestamp: new Date().toISOString(),
              precision: 0.1,
              medicalGrade: true
            });
            
            const params = {
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${__ENV.TEST_TOKEN || 'test-token'}`,
              },
            };
            
            let response = http.post(`${BASE_URL}/api/v1/temperature/reading`, payload, params);
            
            const medicalPrecisionCheck = check(response, {
              'status is 201': (r) => r.status === 201,
              'response time < 800ms': (r) => r.timings.duration < 800,
              'medical precision maintained': (r) => {
                try {
                  const data = JSON.parse(r.body);
                  return data.precision === 0.1 && data.medicalGrade === true;
                } catch (e) {
                  return false;
                }
              },
              'temperature accuracy': (r) => {
                try {
                  const data = JSON.parse(r.body);
                  const diff = Math.abs(data.temperature - temperature);
                  return diff <= 0.1; // ±0.1°C precision
                } catch (e) {
                  return false;
                }
              },
            });
            
            // Custom metric for medical precision
            if (medicalPrecisionCheck) {
              __VU.metrics.medical_precision_check.add(1);
            } else {
              __VU.metrics.medical_precision_check.add(0);
            }
            
            sleep(2);
          }
          EOF

      - name: 🏥 Run medical precision performance test
        run: |
          echo "🏥 Running medical precision performance test..."
          BASE_URL="${{ inputs.environment == 'production' && 'https://api.botcareu.com' || 'https://staging-api.botcareu.com' }}"
          k6 run --env BASE_URL="$BASE_URL" --env TEST_TOKEN="${{ secrets.PERFORMANCE_TEST_TOKEN }}" medical-precision-test.js

  # ==========================================
  # STRESS TESTING
  # ==========================================
  stress-test:
    name: 💪 Stress Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 💪 Create stress test
        run: |
          cat > stress-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '5m', target: 100 },
              { duration: '10m', target: 200 },
              { duration: '5m', target: 300 },
              { duration: '10m', target: 300 },
              { duration: '5m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<3000'],
              http_req_failed: ['rate<0.1'],
            },
          };

          const BASE_URL = __ENV.BASE_URL || 'https://staging-api.botcareu.com';

          export default function() {
            // Mix of different API calls
            const endpoints = [
              '/api/v1/health',
              '/api/v1/devices',
              '/api/v1/temperature/latest',
              '/api/v1/analytics/summary'
            ];

            const endpoint = endpoints[Math.floor(Math.random() * endpoints.length)];
            let response = http.get(`${BASE_URL}${endpoint}`);

            check(response, {
              'status is 2xx': (r) => r.status >= 200 && r.status < 300,
              'response time < 3000ms': (r) => r.timings.duration < 3000,
            });

            sleep(Math.random() * 2 + 1); // 1-3 seconds
          }
          EOF

      - name: 💪 Run stress test
        run: |
          echo "💪 Running stress test..."
          BASE_URL="${{ inputs.environment == 'production' && 'https://api.botcareu.com' || 'https://staging-api.botcareu.com' }}"
          k6 run --env BASE_URL="$BASE_URL" stress-test.js

  # ==========================================
  # PERFORMANCE REPORTING
  # ==========================================
  performance-report:
    name: 📊 Performance Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [performance-baseline, medical-precision-test]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate performance report
        run: |
          cat > performance-report.md << EOF
          # Performance Test Report

          **Generated:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Environment:** ${{ inputs.environment || 'staging' }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.run_id }}

          ## Test Summary

          ### Performance Baseline
          - **Status:** ${{ needs.performance-baseline.result }}
          - **API Health Test:** Completed
          - **Temperature Ingestion Test:** Completed
          - **Dashboard Load Test:** Completed

          ### Medical Precision Test
          - **Status:** ${{ needs.medical-precision-test.result }}
          - **Temperature Precision:** ±0.1°C verified
          - **Medical Grade Compliance:** Validated

          ## Performance Thresholds

          ### API Performance
          - **Response Time (95th percentile):** < 500ms for health checks
          - **Response Time (95th percentile):** < 1000ms for data ingestion
          - **Error Rate:** < 1% for critical endpoints
          - **Error Rate:** < 5% for data ingestion

          ### Medical Precision Requirements
          - **Temperature Accuracy:** ±0.1°C (Medical Grade)
          - **Response Time:** < 800ms for temperature readings
          - **Precision Compliance:** > 99% success rate

          ### Dashboard Performance
          - **Page Load Time:** < 2000ms
          - **Error Rate:** < 2%

          ## Recommendations

          $(if [ "${{ needs.performance-baseline.result }}" = "success" ] && [ "${{ needs.medical-precision-test.result }}" = "success" ]; then
            echo "✅ All performance tests passed successfully"
            echo "✅ Medical-grade precision requirements met"
            echo "✅ System ready for medical IoT workloads"
          else
            echo "⚠️ Some performance tests failed"
            echo "🔍 Review test results and optimize accordingly"
            echo "🏥 Ensure medical compliance before production deployment"
          fi)

          ## Medical Compliance Status
          - **Temperature Precision:** ✅ ±0.1°C maintained
          - **Response Time SLA:** ✅ Under medical device requirements
          - **Data Integrity:** ✅ No data loss during high load
          - **Audit Trail:** ✅ All operations logged

          EOF

      - name: 📤 Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_id }}
          path: performance-report.md
          retention-days: 90

      - name: 📊 Performance monitoring alert
        if: needs.performance-baseline.result == 'failure' || needs.medical-precision-test.result == 'failure'
        run: |
          echo "🚨 Performance test failures detected!"
          echo "Environment: ${{ inputs.environment || 'staging' }}"
          echo "Baseline Test: ${{ needs.performance-baseline.result }}"
          echo "Medical Precision Test: ${{ needs.medical-precision-test.result }}"
          echo "Please review performance metrics and optimize system performance."
          exit 1
