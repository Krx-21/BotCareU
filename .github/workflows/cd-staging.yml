name: 🚀 Deploy to Staging

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # STAGING DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: 
      name: staging
      url: https://staging.botcareu.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging-latest

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=staging
            BUILD_VERSION=${{ github.sha }}

      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/web
          file: ./frontend/web/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=staging
            BUILD_VERSION=${{ github.sha }}

      - name: 🚀 Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/botcareu-staging
            
            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-${{ github.sha }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-${{ github.sha }}
            
            # Update docker-compose with new image tags
            sed -i 's|image: .*backend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:staging-${{ github.sha }}|g' docker-compose.staging.yml
            sed -i 's|image: .*frontend:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:staging-${{ github.sha }}|g' docker-compose.staging.yml
            
            # Run database migrations
            docker-compose -f docker-compose.staging.yml run --rm api npm run migrate
            
            # Deploy with zero-downtime
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            
            # Health check
            sleep 30
            curl -f http://localhost:3001/api/v1/health || exit 1
            
            # Clean up old images
            docker image prune -f

      - name: 🧪 Run staging smoke tests
        run: |
          echo "🧪 Running smoke tests against staging environment..."
          # Wait for services to be ready
          sleep 60
          
          # Test API health endpoint
          curl -f https://staging-api.botcareu.com/api/v1/health
          
          # Test frontend accessibility
          curl -f https://staging.botcareu.com
          
          echo "✅ Smoke tests passed"

      - name: 📊 Run performance tests
        run: |
          echo "📊 Running performance tests..."
          # Install k6 for load testing
          sudo apt-get update
          sudo apt-get install -y k6
          
          # Create basic performance test
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
          };
          
          export default function() {
            let response = http.get('https://staging-api.botcareu.com/api/v1/health');
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
          }
          EOF
          
          # Run performance test
          k6 run performance-test.js

      - name: 📝 Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
            echo "🌐 Staging URL: https://staging.botcareu.com"
            echo "📊 API Health: https://staging-api.botcareu.com/api/v1/health"
          else
            echo "❌ Staging deployment failed"
          fi

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Staging Deployment')
            );
            
            const deploymentStatus = '${{ job.status }}' === 'success' ? '✅ Success' : '❌ Failed';
            const body = `## 🚀 Staging Deployment ${deploymentStatus}
            
            **Commit:** \`${{ github.sha }}\`
            **Environment:** Staging
            **Status:** ${deploymentStatus}
            
            ${deploymentStatus === '✅ Success' ? `
            ### 🌐 Staging URLs
            - **Frontend:** https://staging.botcareu.com
            - **API:** https://staging-api.botcareu.com
            - **Health Check:** https://staging-api.botcareu.com/api/v1/health
            
            ### 🧪 Test Results
            - Smoke tests: ✅ Passed
            - Performance tests: ✅ Passed
            ` : `
            ### ❌ Deployment Failed
            Please check the workflow logs for details.
            `}
            
            **Deployed at:** ${new Date().toISOString()}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # ==========================================
  # STAGING CLEANUP
  # ==========================================
  cleanup-staging:
    name: 🧹 Cleanup Staging
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
      - name: 🧹 Cleanup staging environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # Stop and remove staging containers for this PR
            cd /opt/botcareu-staging
            docker-compose -f docker-compose.staging.yml down
            
            # Clean up unused images
            docker image prune -f
            
            echo "🧹 Staging environment cleaned up"
