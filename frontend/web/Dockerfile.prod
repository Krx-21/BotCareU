# Production Dockerfile for BotCareU Frontend
# Medical-grade IoT health monitoring dashboard
# Multi-stage build with Nginx for optimized production serving

# =============================================================================
# BUILD STAGE
# =============================================================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build arguments for production configuration
ARG NODE_ENV=production
ARG VITE_API_URL
ARG VITE_WS_URL
ARG VITE_MQTT_URL
ARG BUILD_VERSION
ARG BUILD_DATE

# Set environment variables for build
ENV NODE_ENV=$NODE_ENV
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_WS_URL=$VITE_WS_URL
ENV VITE_MQTT_URL=$VITE_MQTT_URL
ENV VITE_BUILD_VERSION=$BUILD_VERSION
ENV VITE_BUILD_DATE=$BUILD_DATE

# Build the application
RUN npm run build

# =============================================================================
# PRODUCTION STAGE
# =============================================================================
FROM nginx:alpine AS production

# Install additional packages for medical-grade monitoring
RUN apk add --no-cache \
    curl \
    tzdata

# Set timezone for consistent medical logging
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create nginx user and directories
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S nginx-app -u 1001 -G nginx-app

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create custom nginx configuration for medical-grade security
RUN mkdir -p /etc/nginx/conf.d

# Create nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
# BotCareU Frontend - Medical-grade configuration

server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Security headers for medical data protection
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:; frame-ancestors 'self';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Medical compliance headers
    add_header X-Medical-Grade "true" always;
    add_header X-Temperature-Precision "¬±0.1¬∞C" always;
    add_header X-HIPAA-Compliant "true" always;
    
    # Root location
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files \$uri \$uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Medical-Grade "true" always;
        }
        
        # No cache for HTML files (for updates)
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header X-Medical-Grade "true" always;
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header X-Medical-Grade "true" always;
    }
    
    # API proxy (if needed)
    location /api/ {
        proxy_pass \$BACKEND_URL;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        # Medical compliance headers
        add_header X-Medical-Grade "true" always;
        add_header X-Temperature-Precision "¬±0.1¬∞C" always;
    }
    
    # WebSocket proxy for real-time medical data
    location /socket.io/ {
        proxy_pass \$BACKEND_URL;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Medical compliance headers
        add_header X-Medical-Grade "true" always;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Deny access to backup files
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging for medical audit trails
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
}
EOF

# Create custom error pages
RUN mkdir -p /usr/share/nginx/html/error

COPY <<EOF /usr/share/nginx/html/404.html
<!DOCTYPE html>
<html>
<head>
    <title>BotCareU - Page Not Found</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .error { color: #e74c3c; }
        .medical-notice { background: #e8f5e8; padding: 20px; margin: 20px; border-radius: 8px; }
    </style>
</head>
<body>
    <h1 class="error">404 - Page Not Found</h1>
    <div class="medical-notice">
        <h3>üè• Medical System Notice</h3>
        <p>If you were accessing medical data, please contact your system administrator.</p>
        <p>All access attempts are logged for audit compliance.</p>
    </div>
    <a href="/">Return to Dashboard</a>
</body>
</html>
EOF

COPY <<EOF /usr/share/nginx/html/50x.html
<!DOCTYPE html>
<html>
<head>
    <title>BotCareU - Service Unavailable</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .error { color: #e74c3c; }
        .medical-notice { background: #ffe6e6; padding: 20px; margin: 20px; border-radius: 8px; }
    </style>
</head>
<body>
    <h1 class="error">Service Temporarily Unavailable</h1>
    <div class="medical-notice">
        <h3>üè• Medical System Alert</h3>
        <p>The medical monitoring system is temporarily unavailable.</p>
        <p>Please contact technical support immediately if this is a critical situation.</p>
        <p>Incident logged for medical compliance audit.</p>
    </div>
</body>
</html>
EOF

# Create health check script
RUN echo '#!/bin/sh\ncurl -f http://localhost:80/health || exit 1' > /usr/local/bin/healthcheck && \
    chmod +x /usr/local/bin/healthcheck

# Set proper permissions
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html && \
    chown -R nginx-app:nginx-app /var/cache/nginx && \
    chown -R nginx-app:nginx-app /var/log/nginx

# Security: Remove unnecessary packages
RUN apk del --purge && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/*

# Expose port
EXPOSE 80

# Health check for medical-grade monitoring
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD /usr/local/bin/healthcheck

# Add labels for medical compliance and traceability
LABEL maintainer="Kritchaya Chaowajreun <6733007821@student.chula.ac.th>"
LABEL version="1.0.0-alpha"
LABEL description="BotCareU Frontend Dashboard - Medical-grade IoT health monitoring"
LABEL medical.grade="true"
LABEL medical.precision="¬±0.1¬∞C"
LABEL compliance.hipaa="true"
LABEL compliance.fda="software-as-medical-device"
LABEL security.level="high"
LABEL build.date="${BUILD_DATE:-unknown}"
LABEL build.version="${BUILD_VERSION:-unknown}"
LABEL git.commit="${GIT_COMMIT:-unknown}"

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# PRODUCTION OPTIMIZATIONS
# =============================================================================
# 1. Multi-stage build for minimal image size
# 2. Custom nginx configuration with security headers
# 3. Medical compliance headers and error pages
# 4. Health checks for container orchestration
# 5. Proper caching strategy for medical dashboard
# 6. Security hardening with CSP and other headers
# 7. Audit logging for medical compliance

# =============================================================================
# MEDICAL COMPLIANCE NOTES
# =============================================================================
# This Docker image is designed for medical-grade web applications:
# - Security headers for patient data protection
# - Custom error pages with medical compliance notices
# - Audit logging for regulatory requirements
# - Health checks for high availability
# - Proper caching for medical dashboard performance
